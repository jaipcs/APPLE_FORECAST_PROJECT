# -*- coding: utf-8 -*-
"""APPLE_FORECAST_DEPLOY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hO-ey9r2lHkqi49NmWMYfNjNnU0mwSMS
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from prophet import Prophet
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error

st.set_page_config(page_title="Prophet Forecast App", layout="wide")
st.title("ðŸ“Š Prophet Forecast App (Excel-Compatible)")

st.markdown("""
Upload your Excel file with a **date/time column** and a **numeric target column**.
The app will automatically train a [Facebook Prophet](https://facebook.github.io/prophet/) model,
show forecasts, components, and evaluation metrics.
""")

# Sidebar configuration
with st.sidebar:
    st.header("Model Settings")
    periods = st.number_input("Forecast periods (steps ahead)", min_value=1, value=30, step=1)
    freq = st.text_input("Frequency (e.g. D, M, H)", value="D")
    test_ratio = st.slider("Test size (last % of rows)", 5, 50, 20)
    yearly = st.checkbox("Include yearly seasonality", value=True)
    weekly = st.checkbox("Include weekly seasonality", value=True)
    daily = st.checkbox("Include daily seasonality", value=False)

file = st.file_uploader("Upload your Excel file", type=["xlsx", "xls"])

def evaluate(y_true, y_pred):
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred, squared=False)
    return mae, rmse

if file:
    # âœ… Read Excel instead of CSV
    df = pd.read_excel(file)

    # Try to detect date and numeric columns
    date_col, target_col = None, None
    for col in df.columns:
        try:
            pd.to_datetime(df[col])
            date_col = col
            break
        except Exception:
            continue

    num_cols = df.select_dtypes(include=[np.number]).columns
    if not num_cols.empty:
        target_col = st.selectbox("Select target column", list(num_cols))
    else:
        st.error("No numeric columns found for target variable.")
        st.stop()

    if date_col is None:
        st.error("No date/time column detected.")
        st.stop()

    df[date_col] = pd.to_datetime(df[date_col])
    df = df.rename(columns={date_col: "ds", target_col: "y"})
    df = df.sort_values("ds")

    # Train/test split
    split_idx = int(len(df) * (1 - test_ratio / 100))
    train, test = df.iloc[:split_idx], df.iloc[split_idx:]

    # Prophet model
    model = Prophet(
        yearly_seasonality=yearly,
        weekly_seasonality=weekly,
        daily_seasonality=daily
    )
    model.fit(train)

    # Future dataframe
    future = model.make_future_dataframe(periods=periods, freq=freq)
    forecast = model.predict(future)

    # Plot forecasts
    st.subheader("Forecast Results")
    fig1 = model.plot(forecast)
    st.pyplot(fig1)

    st.subheader("Forecast Components")
    fig2 = model.plot_components(forecast)
    st.pyplot(fig2)

    # Evaluation
    merged = pd.merge(test, forecast[["ds", "yhat"]], on="ds", how="inner")
    if not merged.empty:
        mae, rmse = evaluate(merged["y"], merged["yhat"])
        st.success(f"MAE: {mae:.4f} | RMSE: {rmse:.4f}")
    else:
        st.info("Not enough overlapping dates for evaluation.")

    # Download Excel
    out = forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]]
    excel_file = "forecast_results.xlsx"
    out.to_excel(excel_file, index=False)
    with open(excel_file, "rb") as f:
        st.download_button("ðŸ“¥ Download Forecast Excel", f, file_name="forecast_results.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

else:
    st.info("Please upload your Excel file to begin.")
